{"id":null,"title":"Ex1.2","ccs":"* Sender0 representa o estado do emissor com o bit de controlo 0\n* Aceita uma nova mensagem ('accept), envia-a com bit 0 ('send0)\n* e depois volta a enviá-la ou, se receber o ack correto\n* avança para o estado Sender1 (bit 1)\nSender0 = 'accept . 'send0 . (Sender0 + rcv_ack0 . Sender1);\n\n* Sender1 faz o mesmo, mas para o bit de controlo 0\nSender1 = 'accept . 'send1 . (Sender1 + rcv_ack1 . Sender0);\n\n* Reciever0 faz a receção de mensagens com bit 0 (receive0)\n* entrega a mensagem ('deliver), envia o ack ('snd_ack0) e\n* pode alternar para o estado Receiver1 (caso receba uma mensagem com bit 1)\nReceiver0 = receive0 . 'deliver . 'snd_ack0 . (Receiver0 + receive1 . 'deliver . Receiver1);\n\n* Receiver1 faz o mesmo, mas para mensagens com bit 1\nReceiver1 = receive1 . 'deliver . 'snd_ack1 . (Receiver1 + receive0 . 'deliver . Receiver0 );\n\n* Trans faz: entrega normal, perda ou duplicação, para o bit 0 ou para o bit 1\nTrans = send0 . 'receive0 . Trans + send0 . Trans + send0 . 'receive0 . 'receive0 . Trans + send1 . 'receive1 . Trans + send1 . Trans + send1 . 'receive1 . 'receive1 . Trans;\n\n* Ack recebe e envia um ack (0 ou 1)\nAck = snd_ack0 . 'rcv_ack0 . Ack + snd_ack1 . 'rcv_ack1 . Ack;\n\n* Composição paralela de todos os processos, restringindo as ações internas\nABP = Sender0 | Trans | Receiver0 | Ack \\ {send0, send1, rcv_ack0, rcv_ack1, receive0, receive1, snd_ack0, snd_ack1};\n\n* Em SPEC cada mensagem aceite ('accept) é imediatamente entregue ('deliver), repetindo-se o processo.\nSPEC = 'accept . 'deliver . SPEC;","properties":[{"className":"Bisimulation","status":1,"options":{"type":"weak","time":null,"firstProcess":"ABP","secondProcess":"SPEC","comment":""}}],"inputMode":"CCS"}